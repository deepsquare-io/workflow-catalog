# yaml-language-server: $schema=../.job.schema.json

enableLogging: true
resources:
  tasks: 3
  cpusPerTask: 2
  memPerCpu: 10000
  gpus: 1

virtualNetworks:
  - name: network
    gatewayAddress: 10.0.0.1/24

steps:
  - name: 'text-generation-inference'
    launch:
      steps:
        - run:
            container:
              deepsquareHosted: true
              apptainer: true
              registry: registry-1.deepsquare.run
              image: library/text-generation-inference:1.4
            resources:
              gpusPerTask: 1
            env:
              - key: HF_HOME
                value: /deepsquare
            command: |
              set -e

              # Mount the weights
              mkdir -p /data
              mkdir -p $DEEPSQUARE_SHARED_WORLD_TMP/hf-tgi-weights
              mount --bind $DEEPSQUARE_SHARED_WORLD_TMP/hf-tgi-weights /data
              chmod -R 777 $DEEPSQUARE_SHARED_WORLD_TMP/hf-tgi-weights || true

              # Launch the model
              text-generation-launcher --hostname 0.0.0.0 -p 8080 --model-id mistralai/Mistral-7B-Instruct-v0.2
              echo "Exited $?"
            network: slirp4netns
            mapGid: 0
            mapUid: 0
            dns:
              - 8.8.8.8
            customNetworkInterfaces:
              - vnet:
                  name: network
                  address: 10.0.0.2/24

  - name: 'mongo'
    launch:
      steps:
        - run:
            container:
              registry: registry-1.deepsquare.run
              image: library/mongo:7.0.5
            command: |
              set -ex

              # Mount the db
              mkdir -p /data/db
              mkdir -p $DEEPSQUARE_TMP/mongo
              mount --bind $DEEPSQUARE_TMP/mongo /data/db

              # Launch the db
              numactl --interleave=all mongod --bind_ip_all > $DEEPSQUARE_TMP/mongod.log &
              pid=$!
              sleep 5
              mongosh --eval 'db.createUser({ user: "root", pwd: "example", roles: [ { role: "readWrite", db: "test" } ] })' || true
              wait $pid
              echo "Exited $?"
            network: slirp4netns
            mapGid: 0
            mapUid: 0
            customNetworkInterfaces:
              - vnet:
                  name: network
                  address: 10.0.0.3/24

  - name: mongodb-healthcheck
    run:
      container:
        registry: registry-1.deepsquare.run
        image: library/mongo:7.0.5
      network: slirp4netns
      mapGid: 0
      mapUid: 0
      env:
        - key: MONGODB_USERNAME
          value: root
        - key: MONGODB_PASSWORD
          value: example
      customNetworkInterfaces:
        - vnet:
            name: network
            address: 10.0.0.4/24
      command: |
        while ! mongosh mongodb://$MONGODB_USERNAME:$MONGODB_PASSWORD@10.0.0.3:27017/test --eval 'db.runCommand({ping: 1})'; do
            echo "Waiting for database connection..."
            sleep 2
        done

  - name: 'chat-ui'
    steps:
      - run:
          container:
            registry: registry-1.deepsquare.run
            # To update the image, just pull ghcr.io/huggingface/chat-ui:latest
            # and push it to registry-1.deepsquare.run/library/chat-ui:latest
            image: library/chat-ui:latest
          command: |
            set -e

            cat << 'EOF' > .env.local
            MONGODB_URL=mongodb://root:example@10.0.0.3:27017/test
            MODELS=`[
              {
                "name": "mistralai/Mistral-7B-Instruct-v0.2",
                "displayName": "mistralai/Mistral-7B-Instruct-v0.2",
                "description": "Mistral 7B is a new Apache 2.0 model, released by Mistral AI that outperforms Llama2 13B in benchmarks.",
                "websiteUrl": "https://mistral.ai/news/announcing-mistral-7b/",
                "preprompt": "",
                "chatPromptTemplate" : "<s>{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}}{{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}</s>{{/ifAssistant}}{{/each}}",
                "parameters": {
                  "temperature": 0.3,
                  "top_p": 0.95,
                  "repetition_penalty": 1.2,
                  "top_k": 50,
                  "truncate": 3072,
                  "max_new_tokens": 1024,
                  "stop": ["</s>"]
                },
                "promptExamples": [
                  {
                    "title": "Write an email from bullet list",
                    "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
                  }, {
                    "title": "Code a snake game",
                    "prompt": "Code a basic snake game in python, give explanations for each step."
                  }, {
                    "title": "Assist in a task",
                    "prompt": "How do I make a delicious lemon cheesecake?"
                  }
                ],
                "endpoints": [{
                  "type" : "tgi",
                  "url": "http://10.0.0.2:8080"
                }]
              }
            ]`
            EOF

            docker-entrypoint.sh /bin/bash -c /app/entrypoint.sh
            # Or run:
            # npm run build
            # npm run preview -- --host 0.0.0.0 --port 3000
            echo "Exited $?"
          network: slirp4netns
          mapGid: 0
          mapUid: 0
          customNetworkInterfaces:
            - bore:
                address: bore.deepsquare.run
                port: 2200
                targetPort: 3000
            - vnet:
                name: network
                address: 10.0.0.4/24
