# yaml-language-server: $schema=../.job.schema.json

enableLogging: true
resources:
  tasks: 3
  cpusPerTask: 2
  memPerCpu: 10000
  gpus: 1

virtualNetworks:
  - name: network
    gatewayAddress: 10.0.0.1/24

steps:
  - name: 'text-generation-inference'
    launch:
      steps:
        - run:
            container:
              deepsquareHosted: true
              apptainer: true
              registry: registry-1.deepsquare.run
              image: library/text-generation-inference:1.4
            resources:
              gpusPerTask: 1
            env:
              - key: HF_HOME
                value: /deepsquare
            command: |
              set -e

              # Mount the weights
              mkdir -p /data
              mkdir -p $DEEPSQUARE_SHARED_WORLD_TMP/hf-tgi-weights
              mount --bind $DEEPSQUARE_SHARED_WORLD_TMP/hf-tgi-weights /data
              chmod -R 777 $DEEPSQUARE_SHARED_WORLD_TMP/hf-tgi-weights || true

              # Launch the model
              text-generation-launcher --hostname 0.0.0.0 -p 8080 --model-id mistralai/Mistral-7B-Instruct-v0.2
              echo "Exited $?"
            network: slirp4netns
            mapGid: 0
            mapUid: 0
            dns:
              - 8.8.8.8
            customNetworkInterfaces:
              - vnet:
                  name: network
                  address: 10.0.0.2/24

  - name: 'mongo'
    launch:
      steps:
        - run:
            container:
              registry: registry-1.deepsquare.run
              image: library/mongo:7.0.5
            command: |
              set -ex

              # Mount the db
              mkdir -p /data/db
              mkdir -p $STORAGE_PATH/mongo
              mount --bind $STORAGE_PATH/mongo /data/db

              # Launch the db
              numactl --interleave=all mongod --bind_ip_all > $STORAGE_PATH/mongod.log &
              pid=$!
              sleep 5
              mongosh --eval 'db.createUser({ user: "chat", pwd: "example", roles: [ { role: "readWrite", db: "test" } ] })' || true
              wait $pid
              echo "Exited $?"
            network: slirp4netns
            mapGid: 0
            mapUid: 0
            customNetworkInterfaces:
              - vnet:
                  name: network
                  address: 10.0.0.3/24

  - name: mongodb-healthcheck
    run:
      container:
        registry: registry-1.deepsquare.run
        image: library/mongo:7.0.5
      network: slirp4netns
      mapGid: 0
      mapUid: 0
      env:
        - key: MONGODB_USERNAME
          value: chat
        - key: MONGODB_PASSWORD
          value: example
      customNetworkInterfaces:
        - vnet:
            name: network
            address: 10.0.0.4/24
      command: |
        while ! mongosh mongodb://$MONGODB_USERNAME:$MONGODB_PASSWORD@10.0.0.3:27017/test --eval 'db.runCommand({ping: 1})'; do
            echo "Waiting for database connection..."
            sleep 2
        done

  - name: 'chat-ui'
    steps:
      - run:
          container:
            registry: ghcr.io
            # To update the image, go to https://github.com/deepsquare-io/chat-ui
            # Update the fork, merge the main branch to the feat/dynamic branch.
            # Then build the dockerfile on the feat/dynamic branch.
            # And push it to ghcr.io/deepsquare-io/chat-ui:latest
            image: deepsquare-io/chat-ui:latest
          env:
            - key: HF_HOME
              value: /deepsquare

            - key: MONGODB_URL
              value: mongodb://chat:example@10.0.0.3:27017/test
            - key: MONGODB_DB_NAME
              value: 'test'
            - key: MONGODB_DIRECT_CONNECTION
              value: 'false'

            - key: COOKIE_NAME
              value: 'hf-chat'
            - key: HF_TOKEN
              value: ''
            - key: HF_API_ROOT
              value: https://api-inference.huggingface.co/models
            - key: OPENAI_API_KEY
              value: ''

            - key: HF_ACCESS_TOKEN # LEGACY! Use HF_TOKEN instead.
              value: ''

            - key: YDC_API_KEY
              value: ''
            - key: SERPER_API_KEY
              value: ''
            - key: SERPAPI_KEY
              value: ''
            - key: SERPSTACK_API_KEY
              value: ''
            - key: USE_LOCAL_WEBSEARCH
              value: ''

            - key: WEBSEARCH_ALLOWLIST
              value: '[]'
            - key: WEBSEARCH_BLOCKLIST
              value: '[]'

            - key: USE_CLIENT_CERTIFICATE
              value: 'false'
            - key: CERT_PATH
              value: ''
            - key: KEY_PATH
              value: ''
            - key: CA_PATH
              value: ''
            - key: CLIENT_KEY_PASSWORD
              value: ''
            - key: REJECT_UNAUTHORIZED
              value: 'true'

            - key: TASK_MODEL
              value: ''

            - key: PUBLIC_ORIGIN
              value: ''
            - key: PUBLIC_SHARE_PREFIX
              value: ''
            - key: PUBLIC_GOOGLE_ANALYTICS_ID
              value: ''
            - key: PUBLIC_PLAUSIBLE_SCRIPT_URL
              value: ''

            - key: PARQUET_EXPORT_DATASET
              value: ''
            - key: PARQUET_EXPORT_HF_TOKEN
              value: ''
            - key: PARQUET_EXPORT_SECRET
              value: ''

            - key: RATE_LIMIT
              value: ''
            - key: MESSAGES_BEFORE_LOGIN
              value: ''

            - key: APP_BASE
              value: ''

            - key: PUBLIC_VERSION
              value: '1.4.0'
            - key: PUBLIC_APP_NAME
              value: DeepSquare Chat
            - key: PUBLIC_APP_ASSETS
              value: chatui
            - key: PUBLIC_APP_COLOR
              value: blue
            - key: PUBLIC_APP_DESCRIPTION
              value: ''
            - key: PUBLIC_APP_DATA_SHARING
              value: ''
            - key: PUBLIC_APP_DISCLAIMER
              value: '0'
            - key: PUBLIC_APP_DISCLAIMER_MESSAGE
              value: ''
            - key: LLM_SUMMERIZATION
              value: 'true'

            - key: EXPOSE_API
              value: 'true'

            - key: ENABLE_ASSISTANTS
              value: 'true'

            - key: ALTERNATIVE_REDIRECT_URLS
              value: '[]'
            - key: MODELS
              value: |-
                [
                  {
                    "name": "mistralai/Mistral-7B-Instruct-v0.2",
                    "displayName": "mistralai/Mistral-7B-Instruct-v0.2",
                    "description": "Mistral 7B is a new Apache 2.0 model, released by Mistral AI that outperforms Llama2 13B in benchmarks.",
                    "websiteUrl": "https://mistral.ai/news/announcing-mistral-7b/",
                    "preprompt": "",
                    "chatPromptTemplate" : "<s>{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\\n{{/if}}{{/if}}{{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}</s>{{/ifAssistant}}{{/each}}",
                    "parameters": {
                      "temperature": 0.3,
                      "top_p": 0.95,
                      "repetition_penalty": 1.2,
                      "top_k": 50,
                      "truncate": 1024,
                      "max_new_tokens": 1024,
                      "stop": ["</s>"]
                    },
                    "promptExamples": [
                      {
                        "title": "Write an email from bullet list",
                        "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \\n\\n- Wine (x10)\\n- Eggs (x24)\\n- Bread (x12)"
                      }, {
                        "title": "Code a snake game",
                        "prompt": "Code a basic snake game in python, give explanations for each step."
                      }, {
                        "title": "Assist in a task",
                        "prompt": "How do I make a delicious lemon cheesecake?"
                      }
                    ],
                    "endpoints": [{
                      "type" : "tgi",
                      "url": "http://10.0.0.2:8080"
                    }]
                  }
                ]
            - key: TEXT_EMBEDDING_MODELS
              value: |-
                [
                  {
                    "name": "Xenova/gte-small",
                    "displayName": "Xenova/gte-small",
                    "description": "Local embedding model running on the server.",
                    "chunkCharLength": 512,
                    "endpoints": [
                      { "type": "transformersjs" }
                    ]
                  }
                ]
            - key: OPENID_CONFIG
              value: |-
                {
                  PROVIDER_URL: "",
                  CLIENT_ID: "",
                  CLIENT_SECRET: "",
                  SCOPES: "openid profile",
                  TOLERANCE: "",
                  RESOURCE: ""
                }
            - key: OLD_MODELS
              value: '[]'
            - key: PUBLIC_ANNOUNCEMENT_BANNERS
              value: '[]'
          command: |
            set -e

            docker-entrypoint.sh /bin/sh -c 'pm2 start /app/build/index.js -i $(nproc) --no-daemon'
            echo "Exited $?"
          network: slirp4netns
          mapGid: 0
          mapUid: 0
          customNetworkInterfaces:
            - bore:
                address: bore.deepsquare.run
                port: 2200
                targetPort: 3000
            - vnet:
                name: network
                address: 10.0.0.4/24
