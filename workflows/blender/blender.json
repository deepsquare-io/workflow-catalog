{
  "enableLogging": true,
  "resources": {
    "tasks": 4,
    "cpusPerTask": 8,
    "memPerCpu": 8000,
    "gpusPerTask": 1
  },
  "input": {
    "s3": {
      "region": "region",
      "bucketUrl": "s3://test",
      "path": "/test",
      "accessKeyId": "accessKeyId",
      "secretAccessKey": "secretAccessKey",
      "endpointUrl": "https://example"
    }
  },
  "output": {
    "s3": {
      "region": "region",
      "bucketUrl": "s3://test",
      "path": "/test",
      "accessKeyId": "accessKeyId",
      "secretAccessKey": "secretAccessKey",
      "endpointUrl": "https://example"
    }
  },
  "continuousOutputSync": true,
  "steps": [
    {
      "name": "compute-frames",
      "run": {
        "container": {
          "deepsquareHosted": true,
          "apptainer": true,
          "image": "linuxserver/blender:3.4.1",
          "registry": "registry-1.docker.io"
        },
        "command": "set -e\n\n/usr/bin/cat << END > ./frames_per_task.py\nimport bpy\nimport math\nscene = bpy.context.scene\nframes_per_task = int(math.ceil((scene.frame_end - scene.frame_start + 1)/float($NTASKS)))\nprint(f\"frames_per_task={frames_per_task}\")\nEND\n\n/usr/bin/cat << 'END' > ./start_frame.py\nimport bpy\nprint(f\"start_frame={bpy.context.scene.frame_start}\")\nEND\n\n/usr/bin/cat << 'END' > ./end_frame.py\nimport bpy\nprint(f\"end_frame={bpy.context.scene.frame_end}\")\nEND\nframes_per_task=$(/usr/bin/blender -b \"$DEEPSQUARE_INPUT/\"*.blend -P ./frames_per_task.py | sed -nr 's/frames_per_task=(.*)/\\1/p')\nstart_frame=$(/usr/bin/blender -b \"$DEEPSQUARE_INPUT/\"*.blend -P ./start_frame.py | sed -nr 's/start_frame=(.*)/\\1/p')\nend_frame=$(/usr/bin/blender -b \"$DEEPSQUARE_INPUT/\"*.blend -P ./end_frame.py | sed -nr 's/end_frame=(.*)/\\1/p')\n/usr/bin/echo \"START_FRAME=$start_frame\" >> \"$DEEPSQUARE_ENV\"\n/usr/bin/echo \"END_FRAME=$end_frame\" >> \"$DEEPSQUARE_ENV\"\n/usr/bin/echo \"FRAMES_PER_TASK=$frames_per_task\" >> \"$DEEPSQUARE_ENV\""
      }
    },
    {
      "name": "render-loop",
      "for": {
        "parallel": true,
        "range": {
          "begin": 1,
          "end": 4
        },
        "steps": [
          {
            "name": "render",
            "run": {
              "container": {
                "deepsquareHosted": true,
                "apptainer": true,
                "image": "linuxserver/blender:3.4.1",
                "registry": "registry-1.docker.io"
              },
              "shell": "/bin/bash",
              "command": "set -e\n\nstart_frame_i=$(((index-1)*FRAMES_PER_TASK+START_FRAME))\nend_frame_i=$((index*FRAMES_PER_TASK+START_FRAME-1))\n\nif [[ index -eq $NTASKS ]]; then\n  end_frame_i=$END_FRAME\nfi\n\necho \"Rendering $start_frame_i...$end_frame_i\"\n\n/usr/bin/blender --enable-autoexec -E \"CYCLES\" -b \"$STORAGE_PATH\"/input/*.blend -F \"OPEN_EXR\" -o \"$DEEPSQUARE_OUTPUT/frame_#####\" -s \"$start_frame_i\" -e \"$end_frame_i\" -a -- --cycles-print-stats --cycles-device OPTIX"
            }
          }
        ]
      }
    }
  ]
}
